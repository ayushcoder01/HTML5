INTRODUCTION TO HTML :-
=======================
-> Definition:
 - HTML stands for HyperText Markup Language.
 - It is the standard markup language used to create and structure content on the web.
 - HTML is not a programming language; it is a declarative language that tells the browser what to render.

-> Explanation:
 - HyperText: Text that contains links (hyperlinks) to other pages or resources.
 - Markup Language: Uses tags to describe the structure and elements of a document (headings, paragraphs, links, media, etc.).

-> Purpose:
 - To structure all content on the web.
 - Defines text, multimedia, forms, links, and layout of a webpage.

-> Use Cases:
 - Building static or dynamic websites.
 - Structuring content for SEO and accessibility.
 - Creating user interface skeleton for web applications.

-> Best Practices:
 - Start every file with <!DOCTYPE html>.
 - Use lowercase for all tag and attribute names.
 - Apply semantic HTML tags (like <article>, <section>, <header>, <footer>) for readability and accessibility.
 - Properly close all tags and follow indentation.
 - Periodically validate code through W3C HTML Validator.

-> Expert Tips:
 - Browsers auto-correct some errors, but clean code ensures cross-browser compatibility.
 - Use Emmet shortcuts in editors like VS Code to write HTML faster (e.g., html:5).
 - HTML5 introduced many new semantic elements — use them to improve SEO and structure.


HTML STRUCTURE :-
=================
-> Overview:
 - An HTML document has a fixed structure understood by browsers.
 - It mainly consists of: DOCTYPE declaration, <html>, <head>, and <body> elements.

-> <!DOCTYPE html>:
 - Declares that the page is written in HTML5.
 - Must be the first line in the document.
 - Ensures browsers render in standards mode.

-> <html> Element:
 - Root element of the page wrapping entire document.
 - Contains <head> and <body>.
 - Can include a language attribute — example: <html lang="en">.

-> <head> Element:
 - Holds metadata, not visible on the page.
 - Common elements:
   • <title> — Page title (shown in tab)
   • <meta> — Metadata like charset, viewport
   • <link> — Stylesheets
   • <script> — JS files (optional)

-> <body> Element:
 - Contains all visible content.
 - Includes headings, paragraphs, images, videos, forms, buttons, etc.

-> Real-World Example:
   <!DOCTYPE html>
   <html lang="en">
     <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>My Portfolio</title>
     </head>
     <body>
       <h1>Welcome to My Portfolio</h1>
       <p>This is where I showcase my work.</p>
     </body>
   </html>

-> Best Practices:
 - Always use the lang attribute for better accessibility and SEO.
 - Include <meta name="viewport"> for mobile-friendly pages.
 - Keep <head> clean and lightweight.
 - Separate structure (HTML), styling (CSS), and functionality (JS).


HTML SYNTAX :-
==============
-> Overview:
 - HTML syntax refers to how tags, attributes, and elements are written so browsers can correctly interpret the code.

-> Tags:
 - Keywords enclosed in < >, e.g., <p>.
 - Usually have an opening and closing form: <tag>content</tag>.
 - Some tags are self-closing (void): <img>, <br>, <input>, <hr>.

-> Elements:
 - Consist of an opening tag, content (optional), and closing tag.
 - Elements can be nested inside one another.
 - Types of elements:
   • Block-level: Start on a new line & take full width (<div>, <p>, <article>)
   • Inline: Don’t start new line (<span>, <a>, <strong>)

-> Attributes:
 - Provide extra information about an element.
 - Syntax: name="value" within opening tag.
 - Common attributes:
   • id, class, src, href, alt, title, style
   • HTML5 Boolean attrs: disabled, checked, readonly

-> Global Attributes:
 - Can be applied to almost all tags.
 - Examples: id, class, hidden, tabindex, data-*, contenteditable

-> Example:
   <a href="https://example.com" target="_blank" title="Visit site">Click here</a>

-> Best Practices:
 - Always use double quotes for attribute values.
 - Provide meaningful alt text for images.
 - Properly nest and close tags.
 - Prefer semantic tags over generic <div> whenever possible.

-> Common Mistakes to Avoid:
 - Unclosed or mismatched tags.
 - Wrong nesting order (<b><i>text</b></i>).
 - Forgetting the DOCTYPE at top.
 - Missing alt on <img>.
 - Overuse of <div> and <span> without semantics.
