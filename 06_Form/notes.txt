HTML FORMS :-
=============
-> Overview:
 - Forms allow users to send data to a server or process input on a webpage.
 - Built using the <form> tag, which contains various form elements like text fields, buttons, checkboxes, etc.

 - Syntax
   <form action="server_url" method="GET or POST">
     <!-- form elements here -->
   </form>

-> Important Attributes:
 - action: URL where the form data will be sent.
 - method: HTTP method (GET = shows data in URL, POST = sends data securely).
 - autocomplete: Enables/disables auto-fill.
 - target: Where to display response (_self, _blank).

-> Common Form Elements:
 - <input> : For text input, email, password, number, etc.
 - <textarea> : Multiline text input.
 - <label> : Defines label for input field.
 - <select> : Dropdown menu.
 - <option> : Item inside <select>.
 - <button> : Submit/reset/custom buttons.
 - <fieldset> : Groups related elements.
 - <legend> : Caption for fieldset.

-> Basic Example:
   <form action="submit.php" method="post">
     <label for="name">Name:</label>
     <input type="text" id="name" name="username"><br><br>
     
     <label for="email">Email:</label>
     <input type="email" id="email" name="useremail"><br><br>
   
     <label for="msg">Message:</label>
     <textarea id="msg" name="message"></textarea><br><br>
   
     <input type="submit" value="Submit">
   </form>

-> Input Types:
 - text, password, email, number, checkbox, radio, date, file, range, color, hidden, submit, reset, button.

-> Best Practices:
 - Always use <label> for better accessibility.
 - Use POST method when sending sensitive data.
 - Provide proper name attributes for backend processing.
 - Validate inputs using HTML5 attributes (required, minlength, maxlength, pattern).
 - Group related fields with <fieldset> and <legend>.

-> Expert Tips:
 - Use "placeholder" to give input hints.
 - Combine HTML validation with JavaScript for better UX.
 - Apply CSS to style form controls and improve usability.
 - Use <datalist> for auto-suggest input fields.
